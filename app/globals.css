/* app/globals.css â€” Tailwind v4 entry */
@import "tailwindcss";
/* If you want animations, use the official plugin (install first):
   npm i -D tailwindcss-animate
*/
@plugin "tailwindcss-animate";

/* Point Tailwind to your source files (v4) */
@source "./**/*.{ts,tsx}", "../components/**/*.{ts,tsx}", "../lib/**/*.{ts,tsx}";

/* Dark-mode variant for utilities that use it */
@custom-variant dark (&:is(.dark *));

/* ---- Tailwind v4 theme bridge (semantic colors) ----
   We map your CSS tokens (defined in styles/globals.css)
   to Tailwind color names so classes like bg-warning/10 work.
*/
@theme {
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));

  --color-card: hsl(var(--card));
  --color-card-foreground: hsl(var(--card-foreground));
  --color-popover: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));

  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));
  --color-secondary: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary-foreground));
  --color-accent: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));

  --color-muted: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));

  --color-destructive: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));
  --color-success: hsl(var(--success));
  --color-success-foreground: hsl(var(--success-foreground));
  --color-warning: hsl(var(--warning));
  --color-warning-foreground: hsl(var(--warning-foreground));
  --color-info: hsl(var(--info));
  --color-info-foreground: hsl(var(--info-foreground));
}

/* Map your tokens to utility classnames (optional convenience layer) */
@layer utilities {
  .bg-background {
    background-color: hsl(var(--background));
  }

  .text-foreground {
    color: hsl(var(--foreground));
  }

  .bg-card {
    background-color: hsl(var(--card));
  }

  .text-card-foreground {
    color: hsl(var(--card-foreground));
  }

  .bg-popover {
    background-color: hsl(var(--popover));
  }

  .text-popover-foreground {
    color: hsl(var(--popover-foreground));
  }

  .border-border {
    border-color: hsl(var(--border));
  }

  .border-input {
    border-color: hsl(var(--input));
  }

  .ring-ring {
    --tw-ring-color: hsl(var(--ring));
  }

  .bg-primary {
    background-color: hsl(var(--primary));
  }

  .text-primary-foreground {
    color: hsl(var(--primary-foreground));
  }

  .bg-secondary {
    background-color: hsl(var(--secondary));
  }

  .text-secondary-foreground {
    color: hsl(var(--secondary-foreground));
  }

  .bg-accent {
    background-color: hsl(var(--accent));
  }

  .text-accent-foreground {
    color: hsl(var(--accent-foreground));
  }

  .bg-muted {
    background-color: hsl(var(--muted));
  }

  .text-muted-foreground {
    color: hsl(var(--muted-foreground));
  }

  .bg-destructive {
    background-color: hsl(var(--destructive));
  }

  .text-destructive-foreground {
    color: hsl(var(--destructive-foreground));
  }

  .bg-success {
    background-color: hsl(var(--success));
  }

  .text-success-foreground {
    color: hsl(var(--success-foreground));
  }

  .bg-warning {
    background-color: hsl(var(--warning));
  }

  .text-warning-foreground {
    color: hsl(var(--warning-foreground));
  }

  .bg-info {
    background-color: hsl(var(--info));
  }

  .text-info-foreground {
    color: hsl(var(--info-foreground));
  }
}

/* Status indicators using semantic colors (now valid) */
.status-pending {
  @apply bg-warning/10 text-warning border border-warning/20;
}

.status-paid {
  @apply bg-success/10 text-success border border-success/20;
}

.status-overdue {
  @apply bg-destructive/10 text-destructive border border-destructive/20;
}

.status-cancelled {
  @apply bg-muted-foreground/10 text-muted-foreground border border-muted-foreground/20;
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }

  body {
    @apply bg-background text-foreground;
  }
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: hsl(var(--muted));
}

::-webkit-scrollbar-thumb {
  background: hsl(var(--muted-foreground) / 0.3);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: hsl(var(--muted-foreground) / 0.5);
}

/* Smooth transitions */
* {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

/* Gradient card */
.gradient-card {
  background: linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--muted)) 100%);
}